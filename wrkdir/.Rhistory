adult_df = read.csv("adult.data",header = FALSE,strip.white = TRUE, stringsAsFactors = TRUE,col.names = c("age","workclass","fnlwgt","education","education-num","marital-status","occupation",
"relationship","race","sex","capital-gain","capital-loss","hours-per-week","native-country","income"))
str(adult_df)
summary(adult_df$age)
summary(adult_df$workclass)
summary(adult_df$fnlwgt)
summary(adult_df$education)
summary(adult_df$education.num)
summary(adult_df$marital.status)
summary(adult_df$occupation)
summary(adult_df$relationship)
summary(adult_df$race)
summary(adult_df$sex)
summary(adult_df$capital.gain)
summary(adult_df$capital.loss)
summary(adult_df$hours.per.week)
summary(adult_df$native.country)
summary(adult_df$income)
inc_table = table(adult_df$income)
inc_table
inc_table[[1]]/(inc_table[[1]] + inc_table[[2]])
attach(adult_df)
boxplot(age~income)
boxplot(fnlwgt~income)
boxplot(education.num~income)
boxplot(education.num~income)
boxplot(capital.gain~income)
boxplot(capital.loss~income)
boxplot(hours.per.week~income)
t.test(age~income)
t.test(fnlwgt~income)
t.test(education.num~income)
t.test(education.num~income)
t.test(capital.gain~income)
t.test(capital.loss~income)
t.test(hours.per.week~income)
#chisq.test()
chisq.test(workclass~income)
workclass_tbl = table(workclass, income)
chisq.test(workclass)
workclass_tbl = table(workclass, income)
chisq.test(workclass_tbl)
workclass_tbl = table(workclass, income)
workclass_tbl
chisq.test(workclass_tbl)
workclass_tbl = table(workclass, income)
workclass_tbl
chisq.test(workclass_tbl)
marital.status_tbl = table(marital.status, income)
marital.status_tbl
chisq.test(marital.status_tbl)
workclass_tbl = table(workclass, income)
workclass_tbl
chisq.test(workclass_tbl)
marital.status_tbl = table(marital.status, income)
marital.status_tbl
chisq.test(marital.status_tbl)
education_tbl = table(education, income)
education_tbl
chisq.test(education_tbl)
occupation_tbl = table(occupation, income)
occupation_tbl
chisq.test(occupation_tbl)
relationship_tbl = table(relationship, income)
relationship_tbl
chisq.test(relationship_tbl)
sex_tbl = table(sex, income)
sex_tbl
chisq.test(sex_tbl)
native.country_tbl = table(native.country, income)
native.country_tbl
chisq.test(native.country_tbl)
adult_df = read.csv("adult.data",header = FALSE,strip.white = TRUE, stringsAsFactors = TRUE,col.names = c("age","workclass","fnlwgt","education","education-num","marital-status","occupation",
"relationship","race","sex","capital-gain","capital-loss","hours-per-week","native-country","income"))
str(adult_df)
summary(adult_df$age)
summary(adult_df$workclass)
summary(adult_df$fnlwgt)
summary(adult_df$education)
summary(adult_df$education.num)
summary(adult_df$marital.status)
summary(adult_df$occupation)
summary(adult_df$relationship)
summary(adult_df$race)
summary(adult_df$sex)
summary(adult_df$capital.gain)
summary(adult_df$capital.loss)
summary(adult_df$hours.per.week)
summary(adult_df$native.country)
summary(adult_df$income)
inc_table = table(adult_df$income)
inc_table
round(prop.table(inc_table) * 100, digits = 2)
attach(adult_df)
boxplot(age~income)
boxplot(fnlwgt~income)
boxplot(education.num~income)
boxplot(education.num~income)
boxplot(capital.gain~income)
boxplot(capital.loss~income)
boxplot(hours.per.week~income)
t.test(age~income)
t.test(fnlwgt~income)
t.test(education.num~income)
t.test(capital.gain~income)
t.test(capital.loss~income)
t.test(hours.per.week~income)
workclass_tbl = table(workclass, income)
workclass_tbl
chisq.test(workclass_tbl)
marital.status_tbl = table(marital.status, income)
marital.status_tbl
chisq.test(marital.status_tbl)
education_tbl = table(education, income)
education_tbl
chisq.test(education_tbl)
occupation_tbl = table(occupation, income)
occupation_tbl
chisq.test(occupation_tbl)
relationship_tbl = table(relationship, income)
relationship_tbl
chisq.test(relationship_tbl)
sex_tbl = table(sex, income)
sex_tbl
chisq.test(sex_tbl)
native.country_tbl = table(native.country, income)
native.country_tbl
chisq.test(native.country_tbl)
adult_df[adult_df == "?"] <- NA
colSums(is.na(adult_df))
attach(adult_df)
?unique
unique(workclass)
Mode(workclass)
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
Mode(workclass)
Mode(workclass)
Mode <- function(x) {
ux <- unique(x)
ux[[which.max(tabulate(match(x, ux)))]]
}
Mode(workclass)
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
Mode(workclass)
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
workclass[is.na(workclass)] = Mode(workclass)
workclass
sum(is.na(workclass))
workclass[is.na(workclass)] = Mode(workclass)
occupation[is.na(occupation)] = Mode(occupation)
native.country[is.na(native.country)] = Mode(native.country)
colSums(is.na(adult_df))
adult_df$workclass[is.na(workclass)] = Mode(workclass)
adult_df$occupation[is.na(occupation)] = Mode(occupation)
adult_df$native.country[is.na(native.country)] = Mode(native.country)
colSums(is.na(adult_df))
adult_df$workclass[is.na(adult_df$workclass)] = Mode(adult_df$workclass)
adult_df$occupation[is.na(adult_df$occupation)] = Mode(adult_df$occupation)
adult_df$native.country[is.na(adult_df$native.country)] = Mode(adult_df$native.country)
colSums(is.na(adult_df))
package.install("mtools")
installed.packages()
install.packages("mtools")
install.packages("mltools")
library(mltools)
library(data.table)
encoded_df = one_hot(data.table(adult_df), dropUnusedLevels = TRUE)
table(encoded_df)
encoded_table = one_hot(data.table(adult_df), dropUnusedLevels = TRUE)
encoded_df = as.data.frame(encoded_table)
table(encoded_df)
encoded_df$native.country_Italy
table(encoded_df$native.country_Italy)
encoded_table = one_hot(data.table(adult_df[-adult_df$income]), dropUnusedLevels = TRUE)
encoded_table = one_hot(data.table(adult_df[,-adult_df$income]), dropUnusedLevels = TRUE)
encoded_table = one_hot(data.table(adult_df[,-"income"]), dropUnusedLevels = TRUE)
encoded_table = one_hot(data.table(adult_df[,-which(names(adult_df) == "income")], dropUnusedLevels = TRUE)
encoded_df = as.data.frame(encoded_table)
encoded_table = one_hot(data.table(adult_df[,-which(names(adult_df) == "income")]), dropUnusedLevels = TRUE)
encoded_df = as.data.frame(encoded_table)
table(encoded_df$native.country_Italy)
names(encoded_df)
encoded_df$income = adult_df$income
names(encoded_df)
set.seed(1)
install.packages("dprep")
setwd("~/Projects/rprojects/Regression/wrkdir")
clg_df = read.csv("College.csv")
str(clg_df)
sum(is.na(clg_df))
clg_df = clg_df[,-1]
pairs(clg_df$Private~clg_df$Apps)
boxplot(clg_df$Private~clg_df$Apps)
clg_df = as.data.frame(unclass(clg_df))
boxplot(clg_df$Private~clg_df$Apps)
clg_df = as.data.frame(unclass(clg_df))
?as.data.frame
default.stringsAsFactors()
clg_df = as.data.frame(unclass(clg_df), stringsAsFactors = TRUE)
clg_df = as.data.frame(unclass(clg_df), stringsAsFactors = TRUE)
boxplot(clg_df$Private~clg_df$Apps)
boxplot(clg_df$Private~clg_df$Apps)
boxplot(clg_df$Apps~clg_df$Private)
attach(clg_df)
t.test(Apps~Private)
cor(Apps~Private)
cor(Apps, Private)
cor(Private, Apps)
?cor
plot(Apps, Private)
plot(Apps~Private)
t.test(Apps~Private)
plot(Apps~Private)
t.test(Apps~Private)
?boxplot()
summary(Apps)
?sd
apps_sd = sd(Apps)
apps_iqr = 3264 - 776
Apps_sans_outliers = Apps[Apps > 776 - 1.5*apps_iqr & Apps < 3264 + 1.5*apps_iqr]
Apps_sans_outliers
iqr = 3264 - 776
Apps_sans_outliers = Apps[Apps > 776 - 1.5*iqr & Apps < 3264 + 1.5*iqr]
plot(Apps_sans_outliers~Private)
iqr = 3264 - 776
Apps_so = Apps[Apps > 776 - 1.5*iqr & Apps < 3264 + 1.5*iqr] #so means sans outliers
Private_so = Private[Apps > 776 - 1.5*iqr & Apps < 3264 + 1.5*iqr]
plot(Apps_so~Private_so)
t.test(Apps_so~Private_so)
iqr = 3264 - 776
iqr_index = Apps > 776 - 1.5*iqr & Apps < 3264 + 1.5*iqr
Apps_so = Apps[iqr_index] #so means sans outliers
Private_so = Private[iqr_index]
plot(Apps_so~Private_so)
t.test(Apps_so~Private_so)
iqr = 3264 - 776
iqr_index = (Apps > 776 - 1.5*iqr & Apps < 3264 + 1.5*iqr)
Apps_so = Apps[iqr_index] #so means sans outliers
Private_so = Private[iqr_index]
plot(Apps_so~Private_so)
t.test(Apps_so~Private_so)
pairs(Accept, Apps)
pairs(Apps~Accept)
cor(Accept, Apps)
?pairs
?cor
pairs(clg_df[-1])
cor(Accept, Apps)
pairs(clg_df[-1])
pairs(clg_df[2:10])
pairs(clg_df[2:8])
pairs(clg_df[2:8])
pairs(clg_df[-1] & clg_df[9:15])
pairs(clg_df[2:8])
pairs(clg_df[c(1,9:15)])
pairs(clg_df[2:8])
pairs(clg_df[c(1,9:14)])
pairs(clg_df[c(1,15:18)])
pairs(clg_df[2:6])
pairs(clg_df[c(1,7:10)])
pairs(clg_df[c(1,11:13)])
pairs(clg_df[c(1,14:18)])
pairs(clg_df[2:6])
pairs(clg_df[c(1,7:9)])
pairs(clg_df[c(1,10:12)])
pairs(clg_df[c(1,13:15)])
pairs(clg_df[c(1,14:18)])
pairs(clg_df[2:6])
pairs(clg_df[c(2,7:9)])
pairs(clg_df[c(2,10:12)])
pairs(clg_df[c(2,13:15)])
pairs(clg_df[c(2,14:18)])
pairs(clg_df[2:6])
pairs(clg_df[c(2,7:9)])
pairs(clg_df[c(2,10:12)])
pairs(clg_df[c(2,13:15)])
pairs(clg_df[c(2,16:18)])
cor(Accept, Apps)
pairs(clg_df[2:6])
pairs(clg_df[c(2,7:9)])
pairs(clg_df[c(2,10:12)])
pairs(clg_df[c(2,13:15)])
pairs(clg_df[c(2,16:18)])
cor(Accept, Apps)
?cor
cor(Accept, clg_df[-c(1, 3)])
cor(Accept, clg_df[-c(1, 3)])
cor(Apps, clg_df[-c(1, 2)])
hist(Apps)
clg_df$Elite = factor(ifelse(clg_df$Top10perc >= 50, "Yes", "No"))
clg_df = clg_df[-5]
